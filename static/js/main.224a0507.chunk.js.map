{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ukIsdlt","require","calculate","buyerTypes","countries","propertyTypes","buyerTypeLabels","_buyerTypeLabels","Object","defineProperty","MOVING_HOUSE","INVESTOR","FIRST_TIME","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","propertyValue","propertyType","RESIDENTIAL","buyerType","country","ENGLAND","summaryBands","tax","handleChange","bind","assertThisInitialized","doCalc","_this$state","_calculate","setState","event","_event$target","target","name","value","_this$state2","currencySymbol","String","fromCharCode","IRELAND","react_default","a","createElement","className","type","placeholder","onChange","maxLength","defaultValue","concat","keys","sort","reverse","map","propName","key","style","display","toFixed","index","_ref","start","end","bandAmount","taxAdded","bandLimit","adjustedRate","classes","Band","objectSpread","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.224a0507.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nconst ukIsdlt = require('uk-ireland-stampduty-calculator');\n\nconst { calculate, buyerTypes, countries, propertyTypes } = ukIsdlt;\n\nconst buyerTypeLabels = {\n  [buyerTypes.MOVING_HOUSE]: 'moving home',\n  [buyerTypes.INVESTOR]: 'buy to let/additional home',\n  [buyerTypes.FIRST_TIME]: 'first time buyer',\n};\n\nconst Band = function ({start, end, bandAmount, bandLimit, taxAdded, adjustedRate, index}) {\n  const classes = 'col-2 text-right border-left';\n  return (\n    <div key={`band-${index}`} className=\"row border-bottom text-monospace\">\n      <div className=\"col-2 text-right\">{start}</div>\n      <div className={classes}>{end}</div>\n      <div className={classes}>{bandAmount}</div>\n      <div className={classes}>{adjustedRate}</div>\n      <div className=\"col-4 text-right border-left\">{taxAdded.toFixed(2)}</div>\n    </div>\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      propertyValue: 200000,\n      propertyType: propertyTypes.RESIDENTIAL,\n      buyerType: buyerTypes.MOVING_HOUSE,\n      country: countries.ENGLAND,\n      summaryBands: [],\n      tax: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.doCalc = this.doCalc.bind(this);\n  }\n\n  componentDidMount() {\n    this.doCalc();\n  }\n\n  doCalc() {\n    const { propertyValue, propertyType, country, buyerType } = this.state;\n    const { summaryBands, tax } = calculate(\n      propertyValue, propertyType, country, buyerType\n    );\n    this.setState({ summaryBands, tax })\n  }\n\n  handleChange(event) {\n    // console.log(event.target.value);\n    const { name, value } = event.target;\n    this.setState({ [name]: value }, this.doCalc);\n  }\n\n  render() {\n\n    const { propertyValue, summaryBands, tax, propertyType, buyerType, country } = this.state;\n    const currencySymbol = String.fromCharCode(country === countries.IRELAND ? 8364 : 163);\n\n    return (\n      <div className=\"App\">\n        <h3>stampduty calculator</h3>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-3\">\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"propertyValue\"\n                placeholder=\"property value\"\n                onChange={this.handleChange}\n                maxLength=\"10\"\n                defaultValue={propertyValue}\n              />\n              {`${currencySymbol}price`}\n            </div>\n            <div className=\"col-3\">\n              <select\n                className=\"form-control\"\n                name=\"propertyType\"\n                onChange={this.handleChange}\n                defaultValue={propertyType}\n              >\n                {Object.keys(propertyTypes).sort().reverse().map(propName => (\n                  <option\n                    key={propertyTypes[propName]}\n                    name={propertyTypes[propName]}>\n                    {propertyTypes[propName]}\n                  </option>\n                ))\n                }\n              </select>\n            </div>\n            <div className=\"col-3\">\n              <select\n                onChange={this.handleChange}\n                className=\"form-control\"\n                name=\"country\"\n                defaultValue={country}\n              >\n                {Object.keys(countries).sort().map(propName => (\n                  <option\n                    key={countries[propName]}\n                    name={countries[propName]}>\n                    {countries[propName]}\n                  </option>\n                ))\n                }\n              </select>\n            </div>\n            <div className=\"col-3\">\n              <select\n                className=\"form-control\"\n                name=\"buyerType\"\n                onChange={this.handleChange}\n                defaultValue={buyerType}\n                style={\n                  (\n                    propertyType !== propertyTypes.RESIDENTIAL\n                    || country === countries.IRELAND\n                  ) ? { display: 'none' } : {}\n                }\n              >\n                {Object.keys(buyerTypes).sort().reverse().map(propName => (\n                  <option\n                    key={buyerTypes[propName]}\n                    value={buyerTypes[propName]}>\n                    {buyerTypeLabels[buyerTypes[propName]]}\n                  </option>\n                ))\n                }\n              </select>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"row border-bottom font-weight-bold\">\n            <div className=\"col-12\">\n              {`${currencySymbol + tax.toFixed(2)} tax due`}\n            </div>\n          </div>\n          <div className=\"row border-bottom font-weight-bold\">\n            Bands\n          </div>\n          <div className=\"row font-italic border-bottom text-right\">\n            <div className=\"col-2\">\n              from(\n              {currencySymbol}\n              )\n            </div>\n            <div className=\"col-2 border-left\">\n              to(\n              {currencySymbol}\n              )\n            </div>\n            <div className=\"col-2 border-left\">\n              taxable(\n              {currencySymbol}\n            )\n            </div>\n            <div className=\"col-2 border-left\">\n              rate(\n              {String.fromCharCode(37)}\n              )\n            </div>\n            <div className=\"col-4 border-left\">\n              tax(\n              {currencySymbol}\n              )\n            </div>\n          </div>\n          {summaryBands.map((props, index) => Band({index, ...props}))}\n          <div className=\"row text-right border-bottom text-monospace\">\n            <div className=\"col-12\">\n              {tax.toFixed(2)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}